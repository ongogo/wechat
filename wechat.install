<?php

/**
 * @file
 * Install, update and uninstall functions for the wechat module.
 */

/**
 * Implements hook_schema().
 */
function wechat_schema() {
  $schema['wechat_request_message'] = array(
    'description' => 'Stores wechat request message items.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique wechat request message ID.',
      ),
      'msg_id' => array(
        'description' => t('Wechat request message ID.'),
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
      ),
      'to_user_name' => array(
        'description' => t('To user name of wechat request message.'),
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
      ),
      'from_user_name' => array(
        'description' => t('From user name of wechat request message.'),
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
      ),
      'msg_type' => array(
        'description' => t('Message type of wechat request message.'),
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
      ),

      'create_time' => array(
        'description' => t('Create time of wechat request message.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );
  $schema['wechat_request_message_type'] = array(
    'description' => 'Stores information about all defined wechat request message types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique wechat request message type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this wechat request message type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this wechat request message type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this wechat request message type in relation to others.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this wechat request message type.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  $schema['wechat_response_message'] = array(
    'description' => 'Stores wechat response message items.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique wechat response message ID.',
      ),

      'to_user_name' => array(
        'description' => t('To user name of wechat response message.'),
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
      ),
      'from_user_name' => array(
        'description' => t('From user name of wechat response message.'),
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
      ),
      'msg_type' => array(
        'description' => t('Message type of wechat response message.'),
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
      ),

      'create_time' => array(
        'description' => t('Create time of wechat response message.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'func_flag' => array(
        'description' => t('Function flag of wechat response message.'),
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
      ),  
    ),

    'primary key' => array('id'),
  );
  $schema['wechat_response_message_type'] = array(
    'description' => 'Stores information about all defined wechat response message types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique wechat response message type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this wechat response message type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this wechat response message type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this wechat response message type in relation to others.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this wechat response message type.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  ); 

  $schema['wechat_user'] = array(
    'description' => 'wechat message.',
    'fields' => array(
      'uid' => array(
        'description' => 'userid.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'openid' => array(
        'description' => 'openid',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'nickname' => array(
        'description' => 'nickname',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'sex' => array(
        'description' => 'sex',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'province' => array(
        'description' => 'province',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'city' => array(
        'description' => 'city',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'country' => array(
        'description' => 'country',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'headimgurl' => array(
        'description' => 'headimgurl',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'unique keys' => array(
      'openid' => array('openid'),
      'uid' => array('uid'),
    ),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
function wechat_install() {
  if (!menu_load('wechat')) {
    menu_save(array(
      'menu_name' => 'wechat',
      'title' => 'WeChat Menu',
      'description' => 'WeChat Custom menu',
    ));
  }
}

function wechat_uninstall() {
  variable_del("wechat_token");
  variable_del("wechat_appid");
  variable_del("wechat_appsecret");
}


