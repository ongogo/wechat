<?php

/**
 * @file
 * Wechat public open platform integration.
 */

include_once 'wechat_request_message_types.inc';
include_once 'wechat_response_message_types.inc';

/**
 * Implementation of hook_menu().
 */
function wechat_menu() {
  $items['wechat'] = array(
    'title' => 'wechat',
    'description' => 'wechat callback',
    'page callback' => 'wechat_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'wechat.pages.inc',
  );
  $items['admin/config/services/wechat'] = array(
    'title' => 'Config Wechat',
    'description' => 'Wechat configuration.',
    'access arguments' => array('access administration pages'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wechat_config_form'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'wechat.admin.inc',
  );
  $items['admin/config/services/wechat/config'] = array(
    'title' => 'Config Wechat',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  ); 
  $items['admin/config/services/wechat/default-message'] = array(
    'title' => 'Default message',
    'access arguments' => array('access administration pages'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wechat_default_message_config_form'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'wechat.admin.inc',
    'weight' => 1,
  ); 
  $items['admin/config/services/wechat/update-menu'] = array(
    'title' => 'Update menu',
    'access arguments' => array('access administration pages'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wechat_update_menu_form'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'wechat.admin.inc',
    'weight' => 1,
  );   
  /* login with wechat */
  $items['wechat/auth'] = array(
    'title' => 'Wechat Auth',
    'page callback' => 'wechat_auth',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'wechat.pages.inc',
  );
  
  foreach (wechat_response_message_get_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['response-message/add/' . $type_url_str] = array(
      'title' => $type->label,
      'title callback' => 'check_plain',
      'page callback' => 'wechat_response_message_add',
      'page arguments' => array($type->type),
      'access arguments' => array('administer wechat request message'),
      //'description' => $type->description,
      'file' => 'wechat.admin.inc',
    );
  }  
  return $items;
}

function wechat_check_signature() {
  $signature = $_GET["signature"];
  $timestamp = $_GET["timestamp"];
  $nonce = $_GET["nonce"];

  $token = variable_get('wechat_token', '');
  $tmp_arr = array($token, $timestamp, $nonce);
  sort($tmp_arr);
  $tmp_str = implode( $tmp_arr );
  $tmp_str = sha1( $tmp_str );

  if ( $tmp_str == $signature ) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
function wechat_build_request_message($request_data) {
  //转换回来
  $xml_obj = (object)$request_data;
  $message = entity_create('wechat_request_message', array('msg_type' => $xml_obj->MsgType));
  $message_wrapper = entity_metadata_wrapper('wechat_request_message', $message);
  $message_wrapper->to_user_name->set($xml_obj->ToUserName);
  $message_wrapper->from_user_name->set($xml_obj->FromUserName);
  if ($xml_obj->MsgType == 'event') {
    $message_wrapper->msg_id->set('');
  }
  else {
    $message_wrapper->msg_id->set($xml_obj->MsgId);
  }
  
  if ($xml_obj->MsgType == 'text') {
    $message_wrapper->wechat_content->set($xml_obj->Content);
  }
  elseif ($xml_obj->MsgType == 'image') {
    $message_wrapper->wechat_pic_url->set($xml_obj->PicUrl);
  }
  elseif ($xml_obj->MsgType == 'voice') {
    $message_wrapper->wechat_media_id->set($xml_obj->MediaId);
    $message_wrapper->wechat_format->set($xml_obj->Format);
    $message_wrapper->wechat_recognition->set($xml_obj->Recognition);
  }
  elseif ($xml_obj->MsgType == 'video') {
    $message_wrapper->wechat_media_id->set($xml_obj->MediaId);
    $message_wrapper->wechat_thumb_media_id->set($xml_obj->ThumbMediaId);
  } 
  elseif ($xml_obj->MsgType == 'location') {
    $message_wrapper->wechat_location_x->set($xml_obj->Location_X);
    $message_wrapper->wechat_location_y->set($xml_obj->Location_Y);
    $message_wrapper->wechat_scale->set($xml_obj->Scale);
    $message_wrapper->wechat_label->set($xml_obj->Label);
  } 
  elseif ($xml_obj->MsgType == 'link') {
    $message_wrapper->wechat_title->set($xml_obj->Title);
    $message_wrapper->wechat_description->set($xml_obj->Description);
    $message_wrapper->wechat_url->set($xml_obj->Url);
  }  
  elseif ($xml_obj->MsgType == 'event') {
    $message_wrapper->wechat_event->set($xml_obj->Event);
    if (isset($xml_obj->EventKey)) {
      $message_wrapper->wechat_event_key->set($xml_obj->EventKey);
    }
    if (isset($xml_obj->Ticket)) {
      $message_wrapper->wechat_ticket->set($xml_obj->Ticket);
    }
    if (isset($xml_obj->Latitude)) {
      $message_wrapper->wechat_latitude->set($xml_obj->Latitude);
    }
    if (isset($xml_obj->Longitude)) {
      $message_wrapper->wechat_longitude->set($xml_obj->Longitude);
    }
    if (isset($xml_obj->Precision)) {
      $message_wrapper->wechat_precision->set($xml_obj->Precision);
    }

  }   
  $message_wrapper->save(true);
  $message = $message_wrapper->value();
  return $message;
}

function wechat_response_message_obj_to_xml(WechatResponseMessage $message) {
  $message_wrapper = entity_metadata_wrapper('wechat_response_message', $message);
  $request_time = REQUEST_TIME;
  $to_user_name = $message_wrapper->to_user_name->value();
  $from_user_name = $message_wrapper->from_user_name->value();
  $result_str = "";
  if ($message->msg_type == 'text') {
    $content = $message_wrapper->wechat_content->value();
    $return_template = 
    "<xml>
      <ToUserName><![CDATA[%s]]></ToUserName>
      <FromUserName><![CDATA[%s]]></FromUserName>
      <CreateTime>%s</CreateTime>
      <MsgType><![CDATA[text]]></MsgType>
      <Content><![CDATA[%s]]></Content>
      <FuncFlag>0</FuncFlag>
    </xml>";
    $result_str = sprintf($return_template, $to_user_name, $from_user_name, $request_time, $content);
  }
  elseif ($message->msg_type == 'image') {
    $media_id = $message_wrapper->wechat_media_id->value();
    $return_template = 
    "<xml>
      <ToUserName><![CDATA[%s]]></ToUserName>
      <FromUserName><![CDATA[%s]]></FromUserName>
      <CreateTime>%s</CreateTime>
      <MsgType><![CDATA[image]]></MsgType>
      <Image>
        <MediaId><![CDATA[%s]]></MediaId>
      </Image>
    </xml>";
    $result_str = sprintf($return_template, $to_user_name, $from_user_name, $request_time, $media_id);
  }
  elseif ($message->msg_type == 'voice') {
    $media_id = $message_wrapper->wechat_media_id->value();
    $return_template = 
    "<xml>
      <ToUserName><![CDATA[%s]]></ToUserName>
      <FromUserName><![CDATA[%s]]></FromUserName>
      <CreateTime>%s</CreateTime>
      <MsgType><![CDATA[image]]></MsgType>
      <Voice>
        <MediaId><![CDATA[%s]]></MediaId>
      </Voice>
    </xml>";
    $result_str = sprintf($return_template, $to_user_name, $from_user_name, $request_time, $media_id);
  }
  elseif ($message->msg_type == 'video') {
    $media_id = $message_wrapper->wechat_media_id->value();
    $thumb_media_id = $message_wrapper->wechat_thumb_media_id->value();
    $return_template = 
    "<xml>
      <ToUserName><![CDATA[%s]]></ToUserName>
      <FromUserName><![CDATA[%s]]></FromUserName>
      <CreateTime>%s</CreateTime>
      <MsgType><![CDATA[video]]></MsgType>
      <Video>
        <MediaId><![CDATA[%s]]></MediaId>
        <ThumbMediaId><![CDATA[%s]]></ThumbMediaId>
      </Video> 
    </xml>";
    $result_str = sprintf($return_template, $to_user_name, $from_user_name, $request_time, $media_id, $thumb_media_id);
  } 
  elseif ($message->msg_type == 'music') {
    //$media_id = $message_wrapper->wechat_thumb_media_id->value();
    $title = $message_wrapper->wechat_title->value();
    $description = $message_wrapper->wechat_description->value();
    $music_url = $message_wrapper->wechat_music_url->value();
    $hq_music_url = $message_wrapper->wechat_hq_music_url->value();
    $thumb_media_id = $message_wrapper->wechat_thumb_media_id->value();
    $return_template = 
    "<xml>
      <ToUserName><![CDATA[%s]]></ToUserName>
      <FromUserName><![CDATA[%s]]></FromUserName>
      <CreateTime>%s</CreateTime>
      <MsgType><![CDATA[music]]></MsgType>
      <Music>
        <Title><![CDATA[%s]]></Title>
        <Description><![CDATA[%s]]></Description>
        <MusicUrl><![CDATA[%s]]></MusicUrl>
        <HQMusicUrl><![CDATA[%s]]></HQMusicUrl>
        <ThumbMediaId><![CDATA[%s]]></ThumbMediaId>
      </Music>
    </xml>";
    $result_str = sprintf($return_template, $to_user_name, $from_user_name, $request_time, $title, $description, $music_url, $hq_music_url, $thumb_media_id);
  } 
  elseif ($message->msg_type == 'news') {
    $media_id = $message_wrapper->wechat_media_id->value();
    $title = $message_wrapper->wechat_title->value();
    $description = $message_wrapper->wechat_description->value();
    $music_url = $message_wrapper->wechat_music_url->value();
    $hq_music_url = $message_wrapper->wechat_hq_music_url->value();
    $article_count = 0;
    $result_str = "<xml>";
    $result_str .= "<ToUserName><![CDATA[" . $to_user_name . "]]></ToUserName>";
    $result_str .= "<FromUserName><![CDATA[" . $from_user_name . "]]></FromUserName>";
    $result_str .= "<CreateTime>" . $request_time . "</CreateTime>";
    $result_str .= "<MsgType><![CDATA[news]]></MsgType>";
    $result_str .= "<ArticleCount>" . $article_count . "</ArticleCount>";
    $result_str .= "<Articles>";

    //此处循环
    $result_str .= "</Articles>";
    $result_str .= "</xml>";

  } 

  return $result_str;
}

function wechat_response_message_obj_to_json(WechatResponseMessage $message) {
  $message_wrapper = entity_metadata_wrapper('wechat_response_message', $message);
  $request_time = REQUEST_TIME;
  $to_user_name = $message_wrapper->to_user_name->value();
  $result_json = '{"touser":"' . $to_user_name . '",';
  
  if ($message->msg_type == 'text') {
    $result_json .= '"msgtype":"text",';
    $content = $message_wrapper->wechat_content->value();
    $result_json .= '"text":{"content":"' . $content . '"}}';
  }
  elseif ($message->msg_type == 'image') {
    $result_json .= '"msgtype":"image",';
    $media_id = $message_wrapper->wechat_media_id->value();
    $result_json .= '"image":{"media_id":"' . $media_id . '"}}';
  }
  elseif ($message->msg_type == 'voice') {
    $result_json .= '"msgtype":"voice",';
    $media_id = $message_wrapper->wechat_media_id->value();
    $result_json .= '"voice":{"media_id":"' . $media_id . '"}}';
  } 
  elseif ($message->msg_type == 'video') {
    $result_json .= '"msgtype":"video",';
    $media_id = $message_wrapper->wechat_media_id->value();
    $thumb_media_id = $message_wrapper->wechat_thumb_media_id->value();
    $result_json .= '"video":{"media_id":"' . $media_id . '","thumb_media_id":"' . $thumb_media_id . '"}}';
  }
  elseif ($message->msg_type == 'music') {
    $result_json .= '"msgtype":"music",';
    $title = $message_wrapper->wechat_title->value();
    $description = $message_wrapper->wechat_description->value();
    $music_url = $message_wrapper->wechat_music_url->value();
    $hq_music_url = $message_wrapper->wechat_hq_music_url->value();
    $thumb_media_id = $message_wrapper->wechat_thumb_media_id->value();
    $result_json .= '"music":{';
    $result_json .= '"title":"' . $title . '",';
    $result_json .= '"description":"' . $description . '",';
    $result_json .= '"musicurl":"' . $music_url . '",';
    $result_json .= '"hqmusicurl":"' . $hq_music_url . '",';
    $result_json .= '"thumb_media_id":"' . $thumb_media_id . '"';
    $result_json .= '}}';
  }
  elseif ($message->msg_type == 'news') {
    $result_json .= '"msgtype":"news",';
    //Todo

  }  
  return $result_json;
}

function wechat_response_message_obj_to_array(WechatResponseMessage $message) {
  $message_wrapper = entity_metadata_wrapper('wechat_response_message', $message);
  $request_time = REQUEST_TIME;
  $to_user_name = $message_wrapper->to_user_name->value();
  $result_array = array();
  $result_array["touser"] = $to_user_name;
  
  if ($message->msg_type == 'text') {
    $result_array["msgtype"] = "text";
    $content = $message_wrapper->wechat_content->value();
    $result_array["text"] = array(
      "content" => $content
    );
  }
  elseif ($message->msg_type == 'image') {
    $result_json .= '"msgtype":"image",';
    $media_id = $message_wrapper->wechat_media_id->value();
    $result_json .= '"image":{"media_id":"' . $media_id . '"}}';
  }
  elseif ($message->msg_type == 'voice') {
    $result_json .= '"msgtype":"voice",';
    $media_id = $message_wrapper->wechat_media_id->value();
    $result_json .= '"voice":{"media_id":"' . $media_id . '"}}';
  } 
  elseif ($message->msg_type == 'video') {
    $result_json .= '"msgtype":"video",';
    $media_id = $message_wrapper->wechat_media_id->value();
    $thumb_media_id = $message_wrapper->wechat_thumb_media_id->value();
    $result_json .= '"video":{"media_id":"' . $media_id . '","thumb_media_id":"' . $thumb_media_id . '"}}';
  }
  elseif ($message->msg_type == 'music') {
    $result_json .= '"msgtype":"music",';
    $title = $message_wrapper->wechat_title->value();
    $description = $message_wrapper->wechat_description->value();
    $music_url = $message_wrapper->wechat_music_url->value();
    $hq_music_url = $message_wrapper->wechat_hq_music_url->value();
    $thumb_media_id = $message_wrapper->wechat_thumb_media_id->value();
    $result_json .= '"music":{';
    $result_json .= '"title":"' . $title . '",';
    $result_json .= '"description":"' . $description . '",';
    $result_json .= '"musicurl":"' . $music_url . '",';
    $result_json .= '"hqmusicurl":"' . $hq_music_url . '",';
    $result_json .= '"thumb_media_id":"' . $thumb_media_id . '"';
    $result_json .= '}}';
  }
  elseif ($message->msg_type == 'news') {
    $result_json .= '"msgtype":"news",';
    //Todo

  }  
  return $result_array;
}



/**
 * Implement hook_entity_info().
 */
function wechat_entity_info() {
  $return = array(
    'wechat_request_message' => array(
      'label' => t('wechat request message'),
      'plural label' => t('wechat request messages'),
      'description' => t('wechat request message entity.'),
      'entity class' => 'WechatRequestMessage',
      'controller class' => 'EntityAPIController',
      'base table' => 'wechat_request_message',
      'fieldable' => TRUE,
      'view modes' => array(
        'full' => array(
          'label' => t('wechat request message'),
          'custom settings' => FALSE,
        ),
      ),
      'entity keys' => array(
        'id' => 'id',
        'bundle' => 'msg_type',
        'label' => 'label',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'access callback' => 'wechat_request_message_access',
      'module' => 'wechat',
      'metadata controller class' => 'WechatRequestMessageMetadataController'
    ),
  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $types = db_select('wechat_request_message_type', 'w')
    ->fields('w')
    ->execute()
    ->fetchAllAssoc('type');

  foreach ($types as $type => $info) {
    $return['wechat_request_message']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/wechat-request-messages/manage/%wechat_request_message_type',
        'real path' => 'admin/structure/wechat-request-messages/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer wechat request message'),
      ),
    );
  }

  $return['wechat_request_message_type'] = array(
    'label' => t('Wechat request message type'),
    'plural label' => t('Wechat request message types'),
    'description' => t('Wechat request message types of wechat request message.'),
    'entity class' => 'WechatRequestMessageType',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'wechat_request_message_type',
    'fieldable' => FALSE,
    'bundle of' => 'wechat_request_message',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'wechat_request_message_type_access',
    'module' => 'wechat',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/wechat-request-messages',
      'file' => 'wechat.admin.inc',
      'controller class' => 'WechatRequestMessageTypeUIController',
    ),
  );

  $return['wechat_response_message'] = array(

      'label' => t('wechat response message'),
      'plural label' => t('wechat response messages'),
      'description' => t('wechat response message entity.'),
      'entity class' => 'WechatResponseMessage',
      'controller class' => 'EntityAPIController',
      'base table' => 'wechat_response_message',
      'fieldable' => TRUE,
      'view modes' => array(
        'full' => array(
          'label' => t('wechat response message'),
          'custom settings' => FALSE,
        ),
      ),
      'entity keys' => array(
        'id' => 'id',
        'bundle' => 'msg_type',
        'label' => 'label',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'access callback' => 'wechat_response_message_access',
      'module' => 'wechat',
      'metadata controller class' => 'WechatResponseMessageMetadataController'

  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $types = db_select('wechat_response_message_type', 'w')
    ->fields('w')
    ->execute()
    ->fetchAllAssoc('type');

  foreach ($types as $type => $info) {
    $return['wechat_response_message']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/wechat-response-messages/manage/%wechat_response_message_type',
        'real path' => 'admin/structure/wechat-response-messages/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer wechat response message'),
      ),
    );
  }

  $return['wechat_response_message_type'] = array(
    'label' => t('Wechat response message type'),
    'plural label' => t('Wechat response message types'),
    'description' => t('Wechat response message types of wechat response message.'),
    'entity class' => 'WechatResponseMessageType',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'wechat_response_message_type',
    'fieldable' => FALSE,
    'bundle of' => 'wechat_response_message',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'wechat_response_message_type_access',
    'module' => 'wechat',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/wechat-response-messages',
      'file' => 'wechat.admin.inc',
      'controller class' => 'WechatResponseMessageTypeUIController',
    ),
  );    
  return $return;
}
/**
 * Implements hook_permission().
 */
function wechat_permission() {
  $permissions = array(
    'administer wechat request message' => array(
      'title' => t('Administer wechat request message'),
      'description' => t('Edit and view all wechat request message entity.'),
    ),  
  );
  return $permissions;  
}

/**
 * Determines whether the given user has access to a wechat_request_message.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $message
 *   Optionally a message to check access for. If nothing is
 *   given, access for all message is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function wechat_request_message_access($op, $message = NULL, $account = NULL) {
  if (user_access('administer wechat request message', $account)) {
    return TRUE;
  }
  return TRUE;
}

/**
 * Determines whether the given user has access to a wechat_request_message.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $message
 *   Optionally a message to check access for. If nothing is
 *   given, access for all message is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function wechat_request_message_type_access($op, $message_type = NULL, $account = NULL) {
  if (user_access('administer wechat request message', $account)) {
    return TRUE;
  }
  return TRUE;
}

/**
 * Fetch a wechat request message object. 
 *
 * @param $id
 *   Integer specifying the wechat request message id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $wechat_request_message object or FALSE if it cannot be loaded.
 *
 * @see breadcrumb2_load_multiple()
 */
function wechat_request_message_load($id, $reset = FALSE) {
  $request_messages = wechat_request_message_load_multiple(array($id), array(), $reset);
  return reset($request_messages);
}


/**
 * Load multiple wechat request messages based on certain conditions.
 *
 * @param $ids
 *   An array of wechat request message IDs.
 * @param $conditions
 *   An array of conditions to match against the {wechat_request_message} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of wechat request message objects, indexed by bid.
 *
 * @see entity_load()
 * @see wechat_request_message_load()
 */
function wechat_request_message_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('wechat_request_message', $ids, $conditions, $reset);
}

/**
 * Deletes a wechat request message.
 */
function wechat_request_message_delete(WechatRequestMessage $message) {
  $message->delete();
}


/**
 * Delete multiple wechat request messages.
 *
 * @param $ids
 *   An array of wechat request message IDs.
 */
function wechat_request_message_delete_multiple(array $ids) {
  entity_get_controller('wechat_request_message')->delete($ids);
}


/**
 * Create a wechat request message object.
 */
function wechat_request_message_create($values = array()) {
  return new WechatRequestMessage($values);
}


/**
 * Saves a wechat request message to the database.
 *
 * @param $message
 *   The wechat request message object.
 */
function wechat_request_message_save(WechatRequestMessage $message) {
  return $message->save();
}

/**
 * URI callback for wechat request message
 */
function wechat_request_message_uri(WechatRequestMessage $message) {
  return array(
    'path' => 'message/' . $message->id,
  );
}

/**
 * The class used for wechat request message entities
 */
class WechatRequestMessage extends Entity {
  /**
   * The message id.
   *
   * @var integer
   */
  public $id;
  
  /**
   * The message id.
   *
   * @var string
   */
  public $msg_id;
  /**
   * The to user name of wechat request message.
   *
   * @var string
   */
  public $to_user_name;
  
  /**
   * The from user name of wechat request message.
   *
   * @var string
   */
  public $from_user_name;
  
  /**
   * The message type of wechat request message.
   *
   * @var string
   */
  public $msg_type;
  
  /**
   * The creat time of wechat request message.
   *
   * @var integer
   */
  public $create_time;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'wechat_request_message');
  }

  protected function defaultLabel() {
    return $this->msg_id;
  }

  protected function defaultUri() {
    return array('path' => 'message/' . $this->id);
  }
  
  public function save() {
    parent::save();
  }
}

function wechat_request_message_type_options_list() {
  $type_options = array(
    'text' => 'text',
    'image' => 'image',
  );
  
  return $type_options;
}

/**
 * Use a separate class for wechat_request_message types so we can specify some defaults
 * modules may alter.
 */
class WechatRequestMessageType extends Entity {


  public $type;
  public $label;
  public $weight = 0;

  public function __construct($values = array()) {
    parent::__construct($values, 'wechat_request_message_type');
  }

  /**
   * Returns whether the wechat_request_message type is locked, thus may not be deleted or renamed.
   *
   * Wechat_request_message types provided in code are automatically treated as locked, as well
   * as any fixed wechat_request_message type.
   */
  public function isLocked() {
    return isset($this->status) && empty($this->is_new) && (($this->status & ENTITY_IN_CODE) || ($this->status & ENTITY_FIXED));
  }


  /**
   * Overrides Entity::save().
   */
  public function save() {
    parent::save();
    // Clear field info caches such that any changes to extra fields get
    // reflected.
    field_info_cache_clear();
  }
}

/**
 * Menu argument loader; Load a wechat_request_message type by string.
 *
 * @param $type
 *   The machine-readable name of a wechat_request_message type to load.
 * @return
 *   A wechat_request_message type array or FALSE if $type does not exist.
 */
function wechat_request_message_type_load($type) {
  return wechat_request_message_get_types($type);
}

/**
 * Gets an array of all wechat_request_message types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return WechatRequestMessageType[]
 *   Depending whether $type isset, an array of wechat_request_message types or a single one.
 */
function wechat_request_message_get_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('wechat_request_message_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Saves a wechat_request_message type to the db.
 */
function wechat_request_message_type_save(WechatRequestMessageType $type) {
  $type->save();
}

/**
 * Deletes a wechat_request_message type from.
 */
function wechat_request_message_type_delete(WechatRequestMessageType $type) {
  $type->delete();
}


/**
 * Menu argument loader; Load a wechat_response_message type by string.
 *
 * @param $type
 *   The machine-readable name of a wechat_response_message type to load.
 * @return
 *   A wechat_response_message type array or FALSE if $type does not exist.
 */
function wechat_response_message_type_load($type) {
  return wechat_response_message_get_types($type);
}

/**
 * Gets an array of all wechat_response_message types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return ProfileType[]
 *   Depending whether $type isset, an array of wechat_response_message types or a single one.
 */
function wechat_response_message_get_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('wechat_response_message_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Saves a wechat_response_message type to the db.
 */
function wechat_response_message_type_save(WechatResponseMessageType $type) {
  $type->save();
}

/**
 * Deletes a wechat_response_message type from.
 */
function wechat_response_message_type_delete(WechatResponseMessageType $type) {
  $type->delete();
}

/**
 * Use a separate class for wechat_response_message types so we can specify some defaults
 * modules may alter.
 */
class WechatResponseMessageType extends Entity {


  public $type;
  public $label;
  public $weight = 0;

  public function __construct($values = array()) {
    parent::__construct($values, 'wechat_response_message_type');
  }

  /**
   * Returns whether the wechat_response_message type is locked, thus may not be deleted or renamed.
   *
   * Wechat response message types provided in code are automatically treated as locked, as well
   * as any fixed wechat_response_message type.
   */
  public function isLocked() {
    return isset($this->status) && empty($this->is_new) && (($this->status & ENTITY_IN_CODE) || ($this->status & ENTITY_FIXED));
  }


  /**
   * Overrides Entity::save().
   */
  public function save() {
    parent::save();
    // Clear field info caches such that any changes to extra fields get
    // reflected.
    field_info_cache_clear();
  }
}

/**
 * Determines whether the given user has access to a wechat_response_message.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $message
 *   Optionally a message to check access for. If nothing is
 *   given, access for all message is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function wechat_response_message_access($op, $message = NULL, $account = NULL) {
  if (user_access('administer wechat response message', $account)) {
    return TRUE;
  }
  return TRUE;
}

/**
 * Determines whether the given user has access to a wechat_response_message.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $message
 *   Optionally a message to check access for. If nothing is
 *   given, access for all message is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function wechat_response_message_type_access($op, $message_type = NULL, $account = NULL) {
  if (user_access('administer wechat response message', $account)) {
    return TRUE;
  }
  return TRUE;
}

/**
 * Fetch a wechat request message object. 
 *
 * @param $id
 *   Integer specifying the wechat request message id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $wechat_response_message object or FALSE if it cannot be loaded.
 *
 * @see breadcrumb2_load_multiple()
 */
function wechat_response_message_load($id, $reset = FALSE) {
  $response_messages = wechat_response_message_load_multiple(array($id), array(), $reset);
  return reset($response_messages);
}


/**
 * Load multiple wechat request messages based on certain conditions.
 *
 * @param $ids
 *   An array of wechat request message IDs.
 * @param $conditions
 *   An array of conditions to match against the {wechat_request_message} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of wechat request message objects, indexed by bid.
 *
 * @see entity_load()
 * @see breadcrumb2_load()
 */
function wechat_response_message_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('wechat_response_message', $ids, $conditions, $reset);
}

/**
 * Deletes a wechat request message.
 */
function wechat_response_message_delete(WechatResponseMessage $message) {
  $message->delete();
}


/**
 * Delete multiple wechat request messages.
 *
 * @param $ids
 *   An array of wechat request message IDs.
 */
function wechat_response_message_delete_multiple(array $ids) {
  entity_get_controller('wechat_request_message')->delete($ids);
}


/**
 * Create a wechat request message object.
 */
function wechat_response_message_create($values = array()) {
  return new WechatResponseMessage($values);
}


/**
 * Saves a wechat request message to the database.
 *
 * @param $message
 *   The wechat request message object.
 */
function wechat_response_message_save(WechatResponseMessage $message) {
  return $message->save();
}

/**
 * URI callback for wechat_response_message
 */
function wechat_response_message_uri(WechatResponseMessage $message) {
  return array(
    'path' => 'response-message/' . $message->id,
  );
}

/**
 * The class used for wechat_response_message entities
 */
class WechatResponseMessage extends Entity {
  /**
   * The message id.
   *
   * @var integer
   */
  public $id;
  
  /**
   * The save flag.
   *
   * @var integer
   */
  public $save;
  
  /**
   * The wechat request message id.
   *
   * @var integer
   */
  public $rm_id;
  
  /**
   * The func flag.
   *
   * @var integer
   */
  public $func_flag;

  /**
   * The to user name of wechat request message.
   *
   * @var string
   */
  public $to_user_name;
  
  /**
   * The from user name of wechat request message.
   *
   * @var string
   */
  public $from_user_name;
  
  /**
   * The message type of wechat request message.
   *
   * @var string
   */
  public $msg_type;
  
  /**
   * The creat time of wechat request message.
   *
   * @var integer
   */
  public $create_time;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'wechat_response_message');
  }

  protected function defaultLabel() {
    return $this->msg_id;
  }

  protected function defaultUri() {
    return array('path' => 'response-message/' . $this->id);
  }
  
  public function save() {
    parent::save();
  }
  
  public function send() {
    $result_str = wechat_response_message_obj_to_xml($this);
    echo $result_str;
  }

  public function sendCustomMessage() {
    $array_data = wechat_response_message_obj_to_array($this);
  
    $appid = variable_get('wechat_appid', "");
    $appsecret =variable_get('wechat_appsecret', "");
    $access_token = wechat_get_access_token($appid, $appsecret);
    $we_obj = _wechat_init_obj();
    $we_obj->checkAuth($appid, $appsecret, $access_token);
    $result = $we_obj->sendCustomMessage($array_data);
 
    if (!empty($result)) {
      //Todo: Error.
      return $result;
    }
    else{
      return FALSE;
    }
  }
}

/**
 * hook menu form
 */
function wechat_form_menu_edit_item_alter(&$form, $form_state) {
  $item = $form['original_item']['#value'];
  _wechat_menu_form_alter($form, $item, $form);
}

/**
 * Add the menu attributes to a menu item edit form.
 *
 * @param $form
 *   The menu item edit form passed by reference.
 * @param $item
 *   The optional existing menu item for context.
 */
function _wechat_menu_form_alter(array &$form, array $item = array(), array &$complete_form) {
  // Restrict access to the new form elements.
  if ($item['menu_name'] !== 'wechat') {
    return;
  }
  $form['options']['#tree'] = TRUE;
  $form['options']['#weight'] = 50;

  // Unset the previous value so that the new values get saved.
  unset($form['options']['#value']['attributes']);

  $form['options']['attributes'] = array(
    '#type' => 'fieldset',
    '#title' => 'WeChat Menu Config',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $form['options']['attributes']['wechat_type'] = array(
    '#type' => 'radios',
    '#title' => t('Menu Type'),
    '#default_value' => isset($item['options']['attributes']['wechat_type']) ? $item['options']['attributes']['wechat_type'] : 'click',
    '#options' => array('click' => t('Click'), 'view' => t('View')),
    '#description' => t('Click: send click event to server, View: open menu url.'),
      '#required' => TRUE,
  );
  $form['options']['attributes']['wechat_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Menu KEY'),
    '#description' => t('Key for the menu clicked event'),
    '#default_value' => isset($item['options']['attributes']['wechat_key']) ? $item['options']['attributes']['wechat_key'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="options[attributes][wechat_type]"]' => array('value' => 'click'),
      ),
    ),
  );
  $form['options']['attributes']['wechat_default_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Menu Default Message'),
    '#description' => t('Send this message on menu clicked if no other module take action'),
    '#default_value' => isset($item['options']['attributes']['wechat_default_message']) ? $item['options']['attributes']['wechat_default_message'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="options[attributes][wechat_type]"]' => array('value' => 'click'),
      ),
    ),
  );
  $form['options']['attributes']['wechat_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Menu Open URL'),
    '#description' => t('Open this URL if menu type is view.'),
    '#default_value' => isset($item['options']['attributes']['wechat_url']) ? $item['options']['attributes']['wechat_url'] : '',
      '#states' => array(
      'visible' => array(
        ':input[name="options[attributes][wechat_type]"]' => array('value' => 'view'),
      ),
    ),
  );
  $form['#validate'][] = '_wechat_menu_form_validate';
}

function _wechat_menu_form_validate($form, &$form_state) {
  if ($form_state['values']['options']['attributes']['wechat_type'] == 'click') {
    if (empty($form_state['values']['options']['attributes']['wechat_key'])) {
      form_set_error('wechat_key', t('Menu KEY is required'));
    }
  }
  else {
    if (!valid_url($form_state['values']['options']['attributes']['wechat_url'], TRUE)) {
      form_set_error('wechat_url', t('Please enter a url.'));
    }
  }
}


/**
 * init wechat object
 */
function _wechat_init_obj() {
  $we_obj = &drupal_static(__FUNCTION__);
  if (!isset($we_obj)) {
    module_load_include('php', 'wechat', 'sdk/wechat.class');
    $options = array(
      'token' => variable_get('wechat_token', ""),
      'appid' => variable_get('wechat_appid', ""),
      'appsecret' => variable_get('wechat_appsecret', ""),
    );
    $we_obj = new Wechat($options);
  }
  return $we_obj;
}

/**
 * user login by uid
 */
function _wechat_user_login($uid) {
  global $user;
  $user = user_load($uid);
  drupal_session_regenerate();
}

/**
 * hook_user_load
 */
function wechat_user_load($users) {
  $result = db_query('SELECT * FROM {wechat_user} WHERE uid IN (:uids)', array(':uids' => array_keys($users)));
  foreach ($result as $record) {
    $users[$record->uid]->wechat = $record;
  }
}

/**
 * load user by wechat openid
 */
function wechat_get_user_by_openid($openid) {
  $result = db_query("SELECT * FROM {wechat_user} WHERE openid=:openid", array(':openid' => $openid));
  if (!$result) {
    return FALSE;
  }
  $authmap = $result->fetchAssoc();
  if (!empty($authmap['uid'])) {
    return user_load($authmap['uid']);
  }
  return FALSE;
}


/**
 * Login user and get user openid
 */
function wechat_snsapi_base($path, $onerror='') {
  $we_obj = _wechat_init_obj();
  $auth_url = $we_obj->getOauthRedirect(url('wechat/auth', array('absolute' => TRUE, 'query' => array('destination' => $path, 'onerror' => $onerror))), 1, 'snsapi_base');
  drupal_goto($auth_url);
}

function wechat_snsapi_userinfo($path, $onerror) {
  $we_obj = _wechat_init_obj();
  $auth_url = $we_obj->getOauthRedirect(url('wechat/auth', array('absolute' => TRUE, 'query' => array('destination' => $path, 'onerror' => $onerror))), 2, 'snsapi_userinfo');
  drupal_goto($auth_url);
}

/**
 * connect user with wechat openid
 */
function wechat_connect_user($uid, $openid) {
  db_query('delete FROM {wechat_user} WHERE uid=:uid OR openid=:openid', array(':uid' => $uid, ':openid' => $openid));
  $we_obj = _wechat_init_obj();
  $user_info = $we_obj->getUserInfo($openid);
  if ($user_info) {
    $wechat_user = array(
      'uid' => $uid,
      'openid' => $user_info['openid'],
      'nickname' => $user_info['nickname'],
      'sex' => $user_info['sex'],
      'province' => $user_info['province'],
      'city' => $user_info['city'],
      'country' => $user_info['country'],
      'headimgurl' => $user_info['headimgurl'],
      'extend' => array(),
    );
    if (drupal_write_record('wechat_user', $wechat_user)) {
      return TRUE;
    }
  }
  return FALSE;
}

function wechat_get_access_token($appid='', $appsecret='') {
  $access_token = FALSE;
  $access_token_object = db_query("SELECT * FROM {wechat_access_token} WHERE app_id=:appid", array(':appid' => $appid))->fetchObject();
  $current = time();
  //print debug($access_token_object);
  if (isset($access_token_object->token)) { 
    $expire = $access_token_object->expire;
    $create_time = $access_token_object->create_time;
    if ($create_time + $expire - 30 > $current) {
      $access_token = $access_token_object->token;
      //drupal_set_message('reuse:123');
      return $access_token;
    }
  }
  //drupal_set_message('createnew:123');
  $we_obj = _wechat_init_obj();
  $access_token = $we_obj->checkAuth($appid, $appsecret);

  if (!empty($access_token)) {
    db_delete('wechat_access_token')
    ->condition('app_id', $appid)
    ->execute();

    $query = db_insert('wechat_access_token')->fields(array('app_id', 'token', 'expire', 'create_time'));
    $query->values(array(
      'app_id' => $appid,
      'token' => $access_token,
      'expire' => 3600,
      'create_time' => $current,
    ));
    $query->execute();
  }
  return $access_token;
}